#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'sparechange'
require 'highline/import'

class App
  include Methadone::Main
  include Methadone::CLILogging

  def self.cleanup
    info "\n\nQuitting..." unless @notified
    @notified = 1
    exit(0)
  end

  trap("INT") { cleanup }

  main do
    say "Spare Change version #{SpareChange::VERSION}"
    say "Enter transactions, or \"quit\" at the date prompt to exit"
    begin
      while(true)
        date = ask("Date? ") do |q|
          q.default = Date.today.strftime("%m/%d/%Y")
          q.validate = /\d\d\/\d\d\/\d\d\d\d|quit/
        end
        debug "Date: #{date}"
        break if date == "quit"
        amount = ask("Amount? ") do |q|
          q.validate = /-?\d+(\.\d\d)?/
        end
        debug "Amount: #{amount}"
        party = ask("Party? ")
        debug "Party: #{party}"
        description = ask("Description? ")
        debug "Description: #{description}"
        category = choose do |menu|
          menu.flow = :columns_across
          if amount.to_i > 0
            menu.header = "Income Category"
            menu.choices(:ravelry, :etsy, :direct, :pattern)
          else
            menu.header = "Expense Category"
            menu.choices(:yarn, :supplies, :postage, :paypal, :etsy)
          end
        end
        debug "Category: #{category}"
        sleep 1
        say "Loaded entry (not really)"
      end
    rescue EOFError
    rescue Exception => e
      warn e.message
    ensure
      cleanup
    end
  end

  # supplemental methods here

  # Declare command-line interface here

  # description "one line description of your app"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  version SpareChange::VERSION

  use_log_level_option

  go!
end
